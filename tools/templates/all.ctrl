*****************************************************************************************************************************************************************
***************************************************************    Job Resource Configuration    ****************************************************************
*****************************************************************************************************************************************************************

job_letter=r
# One alphabetic character (i.e. a letter from a-z or A-Z)
# Should not be changed during runtime, and be the same for all joblines
# Required when running VF several times on the same cluster to distinguish the jobs in the batchsystem

batchsystem=SLURM
# Possible values: SLURM, TOQRUE, PBS, LSF, SGE

partition=shared
# also called queue

timelimit=1-00:00:00
# format for slurm: dd-hh:mm:ss
# format for TORQUE and PBS: hh:mm:ss
# format for SGE: hh:mm:ss
# format for LSF: hh:mm
# for all: always fill up with two digits per field (used be the job scripts)

nodes_per_job=1
# Not (yet) available for LSF and SGE (is always set to 1)
# Should not be changed during runtime, and be the same for all joblines

cpus_per_step=8
# sets the slurm cpus-per-task variable (task = step) in SLURM
# in LSF this corresponds to the number of slots per node
# Should not be changed during runtime, and be the same for all joblines
# Not yet available for SGE (always set to 1)

queues_per_step=8
# sets the number of queues/processes per step
# Should not be changed during runtime, and be the same for all joblines
# Not yet available for SGE (always set to 1)

cpus_per_queue=1
# Should equal the number: cpus-per-step/queues-per-step
# Should not be changed during runtime, and be the same for all joblines
# Not yet available for SGE (always set to 1)


*****************************************************************************************************************************************************************
*********************************************************************    Workflow Options    ********************************************************************
*****************************************************************************************************************************************************************

ligands_per_queue=200000
# used as a limit of ligands per running queue (small values only useful for testing)

ligands_todo_per_queue=10000
# used as a limit of ligands for the to-do lists
# this value should be divisible by the next setting "ligands_todo_per_refilling_step"

ligands_per_refilling_step=1000
# fill the to-do files of the queues with this number of ligands per refill step
# a number roughly equal to the average of number of ligands per collection is recommended

collection_folder=../../../collections/zinc15_20180825.smi.splitted1000_ind_tgz_tar
# slash at the end is not required (optional)
# relative pathname is required w.r.t. the folder tools/

minimum_time_remaining=10
# In minutes
# A new job if the time left until the end of the walltime is smaller than the timelimit
# This is checked before each ligand is screened
# Thus the timelimit should be larger than the maximum time which is needed to process one ligand

dispersion_time_min=10
# One positive integer, resembling the time in seconds
dispersion_time_max=40
# One positive integer, resembling the time in seconds
# The dispersion time is used when jobs try to access the central task list.
# Each job has to wait a random amount of time in the dispersion interval.
# The effect of this is that when two jobs arrive at the same time at the central task list, the random waiting time will disperse their access on the central task list in time

verbosity_commands=debug
# Possible values: standard, debug
# This option mainly effects the screen output and the logfiles

verbosity_logfiles=debug
# Possible values:
#   * standard
#   * debug : activates the set -x option
# This option affects the preparation scripts for setting up the basic workflow files (before the workflow is running)

error_sensitivity=normal
# Possible values: normal, high
# high sets the shell options "-uo pipefail". Not recommended for production runs, useful mainly for debugging. Pipefails often occur with tar combined with head/tail in pipes, which are not an actual problem.
# The u-option will always lead to a direct exit of the shell script when an unset variable is going to be used.

error_response=fail
# Affects most errors, but not all (e.g. not the u-option of the shell)
# Possible values:
#   * ignore    : ignore error and continue
#   * next_job  : end this job and start new job
#   * fail      : exit workflow with failure (exit code 1)

tempdir=/tmp
# The directory which is used for the temporary workflow files
# Should be a very fast filesystem not part of the distributed cluster filesystem, e.g. a local ramfs (as normally provided by ${VF_TMPDIR})
# The directory does only need to be available on the node on which the job step/queue is running
# In the tempdir, a subfolder named ${USER} will automatically be created


*****************************************************************************************************************************************************************
*****************************************************************    Ligand Preparation Options    **************************************************************
*****************************************************************************************************************************************************************

# Todo: input format choice

chemaxon_license_file=${PWD}/packages/chemaxon-license.cxl
# Required only if cxcalc or molconvert (both of ChemAxon) are used in the preparation steps.
# Should be stored on the cluster filesystem (rather than the $HOME directory due to performance issues)
# Possible values:
#   * <Absolute path to license file>: Shell variables can be used such as $HOME or $PWD (the tools/ directory of the workflow)
#   * none

targetformat=pdbqt
# Possible values: Any format supported by the Open Babel, using the file format identifiers used by Open Babel.
# A complete list can be obtained by running the command "obabel -L formats"

***************************************************************    Protonation State Generation    **************************************************************

protonation_state_generation=true
# Possible values:
#   * false
#   * true

protonation_program_1=cxcalc
protonation_program_2=obabel
# Program 1 is used at first for each ligand, and if it fails program 2 is used instead. If the second program also fails, then the ligand is skipped.
# Setting only required if protonation_state_generation=true
# Possible values:
#   * obabel
#   * cxcalc
#   * none (only for protonation_program_2)

protonation_obligatory=true
# Setting only required if protonation_state_generation=true
# Possible values:
#   * true: Successful protonation of the ligand is mandatory (unsuccessful protonation leads to the omission of this ligand).
#   * false: The ligand will continue to be processed even if the protonation step fails. This might light to protonation states which are unphysiological.

protonation_pH_value=7.4
# Setting only required if protonation_state_generation=true
# Possible values: floating point number between 0.0 and 14.0

keep_ligand_summary_logs=false
# Summary log files which show for each ligand the success status of conversion and the conversion time.
# If the conversion failed, a reason is stated.
# If the transformation succeeded, the conversion programs which were used are stated.
# Possible values:
#   * false
#   * true

******************************************************************    Conformation Generation    ****************************************************************

conformation_generation=true
# Generation of 3D conformation/coordinates of the ligand
# Possible values:
#   * false
#   * true

conformation_program_1=molconvert
conformation_program_2=obabel
# Setting only required if conformation_generation=true
# Program 1 is used at first for each ligand, and if it fails program 2 is used instead. If the second program also fails, then the ligand is skipped.
# Possible values:
#   * obabel
#   * molconvert
#   * none (only possible for conformation_program_2)

conformation_obligatory=true
# Setting only required if conformation_generation=true
# Possible values:
#   * true: Successful 3D conformation generation of the ligand is mandatory (unsuccessful conformation generation leads to the omission of this ligand).
#   * false: The ligand will continue to be processed even if the conformation generation step fails.


*****************************************************************************************************************************************************************
*******************************************************************    Terminating Variables    *****************************************************************
*****************************************************************************************************************************************************************

stop_after_current_ligand=false
# Determines whether the queue is stopped after the ligand currenty (or next) in progress
# Possible values:
#   * false : The queue will continue to process ligands as long as there are ligands remaining for the queue
#   * true : No new ligand will be started after the current ligand is completed

stop_after_collection=false
# Determines whether the queue is stopped after the current collection is completed
# Possible values:
#   * false : A new collection will be started if the current collection is completed and if there are collections remaining
#   * true : No new collection will be started after the current collection is completed

stop_after_job=false
# Determines whether the queue is stopped after the current job is completed
# Possible values:
#   * false : A new job will be submitted if there are more ligands in the current collection or unprocessed collections remaining
#   * true : No new job is submitted after the current job has ended
